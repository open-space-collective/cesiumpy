# Apache License 2.0

import pytest

import cesiumpy
import numpy as np
import scipy.spatial


@pytest.mark.skip(reason="Doesn't match")
class TestVoronoi:
    def test_voronoi(self):

        np.random.seed(1234)
        points = np.random.rand(15, 2) * 5 + np.array([130, 40])

        vor = cesiumpy.spatial.Voronoi(points)
        polygons = vor.get_polygons()

        expected = [
            [
                129.53037742006228,
                44.33471494590681,
                0.0,
                131.40476793036768,
                43.448996661779695,
                0.0,
                131.39784031783313,
                43.270076795621065,
                0.0,
                130.99199913910985,
                42.328426095963245,
                0.0,
                129.53037742006228,
                42.99862087958684,
                0.0,
                129.53037742006228,
                44.33471494590681,
                0.0,
            ],
            [
                132.5231502900114,
                45.90344076159844,
                0.0,
                132.97793597508354,
                44.336889661521575,
                0.0,
                132.64956736534268,
                43.22629856885517,
                0.0,
                132.04973345010688,
                43.48337280292282,
                0.0,
                132.25107509065992,
                45.90344076159844,
                0.0,
                132.5231502900114,
                45.90344076159844,
                0.0,
            ],
            [
                133.77311875584925,
                40.110955821295555,
                0.0,
                132.56020732493596,
                41.408540471782935,
                0.0,
                133.05978915987998,
                42.33192230184925,
                0.0,
                133.81747880349292,
                42.498078263756426,
                0.0,
                135.4154315003338,
                41.85193612810953,
                0.0,
                135.4154315003338,
                40.110955821295555,
                0.0,
                133.77311875584925,
                40.110955821295555,
                0.0,
            ],
            [
                131.89390865691786,
                45.90344076159844,
                0.0,
                131.63882963366206,
                43.55998220705691,
                0.0,
                131.40476793036768,
                43.448996661779695,
                0.0,
                129.53037742006228,
                44.33471494590681,
                0.0,
                129.53037742006228,
                45.90344076159844,
                0.0,
                131.89390865691786,
                45.90344076159844,
                0.0,
            ],
            [
                135.4154315003338,
                43.741768534167036,
                0.0,
                134.30817767731628,
                43.86503713071969,
                0.0,
                134.38197047363133,
                45.90344076159844,
                0.0,
                135.4154315003338,
                45.90344076159844,
                0.0,
                135.4154315003338,
                43.741768534167036,
                0.0,
            ],
            [
                131.03585127801438,
                42.275291825551136,
                0.0,
                131.69926550801236,
                42.680449017412236,
                0.0,
                133.0090748373699,
                42.409930619839045,
                0.0,
                133.05978915987998,
                42.33192230184925,
                0.0,
                132.56020732493596,
                41.408540471782935,
                0.0,
                131.57844318202783,
                41.115828979808505,
                0.0,
                131.03585127801438,
                42.275291825551136,
                0.0,
            ],
            [
                132.64956736534268,
                43.22629856885517,
                0.0,
                132.97793597508354,
                44.336889661521575,
                0.0,
                134.12142452823772,
                43.73557828446551,
                0.0,
                133.81747880349292,
                42.498078263756426,
                0.0,
                133.05978915987998,
                42.33192230184925,
                0.0,
                133.0090748373699,
                42.409930619839045,
                0.0,
                132.7101884373397,
                43.027826672381536,
                0.0,
                132.64956736534268,
                43.22629856885517,
                0.0,
            ],
            [
                131.7316387448889,
                42.93096881919415,
                0.0,
                132.7101884373397,
                43.027826672381536,
                0.0,
                133.0090748373699,
                42.409930619839045,
                0.0,
                131.69926550801236,
                42.680449017412236,
                0.0,
                131.7316387448889,
                42.93096881919415,
                0.0,
            ],
            [
                130.7442505383254,
                40.110955821295555,
                0.0,
                131.57844318202783,
                41.115828979808505,
                0.0,
                132.56020732493596,
                41.408540471782935,
                0.0,
                133.77311875584925,
                40.110955821295555,
                0.0,
                130.7442505383254,
                40.110955821295555,
                0.0,
            ],
            [
                134.38197047363133,
                45.90344076159844,
                0.0,
                134.30817767731628,
                43.86503713071969,
                0.0,
                134.12142452823772,
                43.73557828446551,
                0.0,
                132.97793597508354,
                44.336889661521575,
                0.0,
                132.5231502900114,
                45.90344076159844,
                0.0,
                134.38197047363133,
                45.90344076159844,
                0.0,
            ],
            [
                132.04973345010688,
                43.48337280292282,
                0.0,
                132.64956736534268,
                43.22629856885517,
                0.0,
                132.7101884373397,
                43.027826672381536,
                0.0,
                131.7316387448889,
                42.93096881919415,
                0.0,
                131.39784031783313,
                43.270076795621065,
                0.0,
                131.40476793036768,
                43.448996661779695,
                0.0,
                131.63882963366206,
                43.55998220705691,
                0.0,
                132.04973345010688,
                43.48337280292282,
                0.0,
            ],
            [
                129.53037742006228,
                42.99862087958684,
                0.0,
                130.99199913910985,
                42.328426095963245,
                0.0,
                131.03585127801438,
                42.275291825551136,
                0.0,
                131.57844318202783,
                41.115828979808505,
                0.0,
                130.7442505383254,
                40.110955821295555,
                0.0,
                129.53037742006228,
                40.110955821295555,
                0.0,
                129.53037742006228,
                42.99862087958684,
                0.0,
            ],
            [
                135.4154315003338,
                41.85193612810953,
                0.0,
                133.81747880349292,
                42.498078263756426,
                0.0,
                134.12142452823772,
                43.73557828446551,
                0.0,
                134.30817767731628,
                43.86503713071969,
                0.0,
                135.4154315003338,
                43.741768534167036,
                0.0,
                135.4154315003338,
                41.85193612810953,
                0.0,
            ],
            [
                132.25107509065992,
                45.90344076159844,
                0.0,
                132.04973345010688,
                43.48337280292282,
                0.0,
                131.63882963366206,
                43.55998220705691,
                0.0,
                131.89390865691786,
                45.90344076159844,
                0.0,
                132.25107509065992,
                45.90344076159844,
                0.0,
            ],
            [
                131.39784031783313,
                43.270076795621065,
                0.0,
                131.7316387448889,
                42.93096881919415,
                0.0,
                131.69926550801236,
                42.680449017412236,
                0.0,
                131.03585127801438,
                42.275291825551136,
                0.0,
                130.99199913910985,
                42.328426095963245,
                0.0,
                131.39784031783313,
                43.270076795621065,
                0.0,
            ],
        ]

        for polygon, exp in zip(polygons, expected):
            assert polygon.hierarchy.x == exp

        # testing scipy.spatial.Voronoi instance
        vor = scipy.spatial.Voronoi(points)
        vor = cesiumpy.spatial.Voronoi(vor)
        polygons = vor.get_polygons()
        for polygon, exp in zip(polygons, expected):
            assert polygon.hierarchy.x == exp


class TestConvex:
    def test_convexhull(self):

        np.random.seed(1234)
        points = np.random.rand(15, 2) * 5 + np.array([130, 40])

        hull = cesiumpy.spatial.ConvexHull(points)
        polyline = hull.get_polyline()

        expected = [
            130.37690620821488,
            41.844120030009876,
            0.0,
            132.51541582653905,
            40.06884224795341,
            0.0,
            133.89987904059402,
            41.36296302641321,
            0.0,
            134.6657005099126,
            43.25689071613289,
            0.0,
            134.7906967684185,
            44.379663173710476,
            0.0,
            133.86413310806188,
            44.41320595318058,
            0.0,
            131.38232127571547,
            44.00936088767509,
            0.0,
            130.95759725189447,
            43.11054385519916,
            0.0,
            130.37690620821488,
            41.844120030009876,
            0.0,
        ]

        assert polyline.positions.x == expected

        hull = scipy.spatial.ConvexHull(points)
        hull = cesiumpy.spatial.ConvexHull(hull)
        polyline = hull.get_polyline()
        assert polyline.positions.x == expected
